shadow$provide.module$node_modules$merge$lib$src$index=function(global,require,module,exports){function main(){for(var items=[],_i=0;_i<arguments.length;_i++)items[_i]=arguments[_i];return merge.apply(void 0,items)}function merge(){for(var items=[],_i=0;_i<arguments.length;_i++)items[_i]=arguments[_i];return _merge(!0===items[0],!1,items)}function recursive(){for(var items=[],_i=0;_i<arguments.length;_i++)items[_i]=arguments[_i];return _merge(!0===items[0],!0,items)}function clone(input){if(Array.isArray(input)){for(var output=
[],index=0;index<input.length;++index)output.push(clone(input[index]));return output}if(isPlainObject(input)){output={};for(index in input)output[index]=clone(input[index]);return output}return input}function isPlainObject(input){return input&&"object"===typeof input&&!Array.isArray(input)}function _recursiveMerge(base,extend){if(!isPlainObject(base))return extend;for(var key in extend)"__proto__"!==key&&"constructor"!==key&&"prototype"!==key&&(base[key]=isPlainObject(base[key])&&isPlainObject(extend[key])?
_recursiveMerge(base[key],extend[key]):extend[key]);return base}function _merge(isClone,isRecursive,items){var result;if(isClone||!isPlainObject(result=items.shift()))result={};for(var index=0;index<items.length;++index){var item=items[index];if(isPlainObject(item))for(var key in item)if("__proto__"!==key&&"constructor"!==key&&"prototype"!==key){var value=isClone?clone(item[key]):item[key];result[key]=isRecursive?_recursiveMerge(result[key],value):value}}return result}Object.defineProperty(exports,
"__esModule",{value:!0});exports.isPlainObject=exports.clone=exports.recursive=exports.merge=exports.main=void 0;module.exports=exports=main;exports.default=main;exports.main=main;main.clone=clone;main.isPlainObject=isPlainObject;main.recursive=recursive;exports.merge=merge;exports.recursive=recursive;exports.clone=clone;exports.isPlainObject=isPlainObject}
//# sourceMappingURL=module$node_modules$merge$lib$src$index.js.map
